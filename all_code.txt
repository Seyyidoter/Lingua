//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\app\globals.css =====
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
//// ===== END: C:\Users\seyyid\lingua-write-web\src\app\globals.css =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\app\layout.tsx =====
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
//// ===== END: C:\Users\seyyid\lingua-write-web\src\app\layout.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\app\page.tsx =====
"use client";

import TrainingPage from "@/features/training/TrainingPage";

export default function Page() {
  return <TrainingPage />;
}
//// ===== END: C:\Users\seyyid\lingua-write-web\src\app\page.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\components\ui\badge.tsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-full border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }
//// ===== END: C:\Users\seyyid\lingua-write-web\src\components\ui\badge.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\components\ui\button.tsx =====
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
        "icon-sm": "size-8",
        "icon-lg": "size-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
//// ===== END: C:\Users\seyyid\lingua-write-web\src\components\ui\button.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\components\ui\card.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
//// ===== END: C:\Users\seyyid\lingua-write-web\src\components\ui\card.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\components\ui\input.tsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
//// ===== END: C:\Users\seyyid\lingua-write-web\src\components\ui\input.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\components\ui\progress.tsx =====
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }
//// ===== END: C:\Users\seyyid\lingua-write-web\src\components\ui\progress.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\components\ui\tabs.tsx =====
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }
//// ===== END: C:\Users\seyyid\lingua-write-web\src\components\ui\tabs.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\features\training\components\SubComponents.tsx =====
"use client";

import React from "react";
import { Check, X } from "lucide-react";
import type { DatasetKey } from "@/lib/types";

export function Stat({ label, value }: { label: string; value: string }) {
  return (
    <div>
      <div className="text-sm text-muted-foreground">{label}</div>
      <div className="text-xl font-semibold">{value}</div>
    </div>
  );
}

export function Feedback({
  ok,
  correct,
  hint,
}: {
  ok: boolean;
  correct: string;
  hint?: string;
}) {
  return (
    <div className="flex items-center gap-3 text-sm">
      {ok ? (
        <span className="text-green-600 flex items-center gap-1">
          <Check className="w-4 h-4" /> Correct
        </span>
      ) : (
        <span className="text-red-600 flex items-center gap-1">
          <X className="w-4 h-4" /> Correct: <b className="ml-1">{correct}</b>
        </span>
      )}
      {hint ? <span className="text-muted-foreground">{hint}</span> : null}
    </div>
  );
}

export function DatasetPicker({
  value,
  onChange,
}: {
  value: DatasetKey;
  onChange: (v: DatasetKey) => void;
}) {
  return (
    <div className="flex items-center gap-2">
      <label className="text-sm text-muted-foreground">Dataset</label>
      <select
        className="border rounded-md px-2 py-1 bg-transparent"
        value={value}
        onChange={(e) => onChange(e.target.value as DatasetKey)}
    >
  <option value="en_tr">English â†’ Turkish</option>
  <option value="tr_ru">Turkish â†’ Russian</option>
</select>

    </div>
  );
}
//// ===== END: C:\Users\seyyid\lingua-write-web\src\features\training\components\SubComponents.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\features\training\ListenMode.tsx =====
"use client";

import React, { useEffect, useRef, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Volume2, Keyboard } from "lucide-react";
import { motion } from "framer-motion";

import type { Item } from "@/lib/types";
import type { SRSApi } from "@/lib/srs";
import { fuzzyEq, hint, speak } from "@/lib/utils";
import { Feedback } from "./components/SubComponents";

type ListenState = { item: Item; done: boolean; ok: boolean | null };

export default function ListenMode({
  data,
  srs,
  onFinish,
  datasetKey,
}: {
  data: Item[];
  srs: SRSApi;
  onFinish: (ok: boolean, itemId: number) => void;
  datasetKey: "en_tr" | "tr_ru";
}) {
  const [lsn, setLsn] = useState<ListenState | null>(null);
  const [input, setInput] = useState("");
  const inputRef = useRef<HTMLInputElement | null>(null);

  const generate = () => {
    const item = srs.pickWeighted();
    setLsn({ item, done: false, ok: null });
    setInput("");
    setTimeout(() => inputRef.current?.focus(), 0);
    setTimeout(() => speak(item.src, datasetKey === "tr_ru" ? "tr-TR" : "en-US"), 50);
  };

  useEffect(() => {
    generate();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [data.length]);

  if (!lsn) return null;

  const check = () => {
    if (!lsn || lsn.done) return;
    const ok = fuzzyEq(input, lsn.item.src);
    onFinish(ok, lsn.item.id);
    setLsn({ ...lsn, done: true, ok });
  };

  const next = () => generate();

  return (
    <Card className="backdrop-blur bg-white/40 border-none shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          Listen & Type (EN)
          <Badge variant="secondary" className="ml-2">
            Hint (TR): {lsn.item.dst}
          </Badge>
          <Button
            size="icon"
            variant="ghost"
            className="ml-auto"
            onClick={() => speak(lsn.item.src, "en-US")}
            title="Play pronunciation (EN)"
          >
            <Volume2 className="w-4 h-4" />
          </Button>
        </CardTitle>
      </CardHeader>

      <CardContent>
        <motion.div
          animate={lsn.done && lsn.ok === false ? { x: [0, -6, 6, -6, 6, 0] } : {}}
          transition={{ duration: 0.4 }}
          className="flex items-center gap-2"
        >
          <Input
            ref={inputRef}
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Type what you hear (English)â€¦"
            onKeyDown={(e) => e.key === "Enter" && check()}
            disabled={lsn.done}
          />
          <Button onClick={check} disabled={lsn.done}>Check</Button>
          <Button variant="secondary" onClick={next}>Next</Button>
        </motion.div>

        <div className="mt-3">
          {lsn.done ? (
            <Feedback ok={!!lsn.ok} correct={lsn.item.src} hint={hint(input, lsn.item.src)} />
          ) : (
            <span className="text-sm text-muted-foreground flex items-center gap-2">
              <Keyboard className="w-4 h-4" /> Press the speaker, then type the English word/phrase.
            </span>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
//// ===== END: C:\Users\seyyid\lingua-write-web\src\features\training\ListenMode.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\features\training\McqMode.tsx =====
"use client";

import React, { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Volume2 } from "lucide-react";
import { motion } from "framer-motion";

import type { Item } from "@/lib/types";
import type { SRSApi } from "@/lib/srs";
import { eq, shuffle, speak } from "@/lib/utils";
import { Feedback } from "./components/SubComponents";

type MCQState = { item: Item; options: string[]; chosen: string | null; done: boolean };

export default function McqMode({
  data,
  srs,
  onFinish,
}: {
  data: Item[];
  srs: SRSApi;
  onFinish: (ok: boolean, itemId: number) => void;
}) {
  const [mcq, setMcq] = useState<MCQState | null>(null);

  const generateMCQ = () => {
    const item = srs.pickWeighted();
    const wrongs = shuffle(data.filter(d => d.id !== item.id).map(d => d.dst)).slice(0, 3);
    const options = shuffle([item.dst, ...wrongs]);
    setMcq({ item, options, chosen: null, done: false });
  };

  useEffect(() => {
    generateMCQ();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [data.length]);

  const chooseMCQ = (opt: string) => {
    if (!mcq || mcq.done) return;
    const ok = eq(mcq.item.dst, opt);
    onFinish(ok, mcq.item.id);
    setMcq({ ...mcq, chosen: opt, done: true });
  };

  const nextMCQ = () => generateMCQ();

  if (!mcq) return null;

  return (
    <Card className="backdrop-blur bg-white/40 border-none shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          Translate to Turkish
          <Badge variant="secondary" className="ml-2">
            {mcq.item.src}
          </Badge>
          <Button
            size="icon"
            variant="ghost"
            className="ml-auto"
            onClick={() => speak(mcq.item.src, "en-US")}
            title="Play pronunciation"
          >
            <Volume2 className="w-4 h-4" />
          </Button>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
          {mcq.options.map((opt, i) => {
            const chosen = mcq.chosen === opt;
            const isCorrect = eq(opt, mcq.item.dst);
            const variant = mcq.done
              ? chosen
                ? isCorrect
                  ? "default"
                  : "destructive"
                : isCorrect
                  ? "default"
                  : "outline"
              : "outline";
            return (
              <motion.div key={i} whileTap={{ scale: 0.98 }}>
                <Button
                  variant={variant as any}
                  className="w-full justify-start"
                  onClick={() => chooseMCQ(opt)}
                  disabled={mcq.done}
                >
                  {opt}
                </Button>
              </motion.div>
            );
          })}
        </div>

        <div className="mt-4 flex items-center gap-2">
          {mcq.done ? (
            <Feedback ok={eq(mcq.chosen || "", mcq.item.dst)} correct={mcq.item.dst} />
          ) : (
            <span className="text-sm text-muted-foreground">
              Choose the correct translation.
            </span>
          )}
          <div className="ml-auto">
            <Button variant="secondary" onClick={nextMCQ}>
              Next
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
//// ===== END: C:\Users\seyyid\lingua-write-web\src\features\training\McqMode.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\features\training\TrainingPage.tsx =====
"use client";

import React, { useEffect, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { RotateCcw } from "lucide-react";
import McqMode from "./McqMode";
import WriteMode from "./WriteMode";
import ListenMode from "./ListenMode";
import { DatasetPicker, Stat } from "./components/SubComponents";
import { useSRSState } from "@/lib/srs";
// ğŸ‘‡ iki datasetâ€™i farklÄ± adlarla al
import { DATASETS as EN_TR } from "@/lib/datasets/en_tr";
import { DATASETS as TR_RU } from "@/lib/datasets/tr_ru";

// ğŸ‘‡ Ã§akÄ±ÅŸmayÄ± Ã¶nlemek iÃ§in farklÄ± isim
const ALL_DATASETS = {
  en_tr: EN_TR.en_tr,
  tr_ru: TR_RU.tr_ru,
};


export default function TrainingPage() {
  const [datasetKey, setDatasetKey] = useState<"en_tr" | "tr_ru">("en_tr");
  const data = ALL_DATASETS[datasetKey];          // ğŸ‘ˆ burada ALL_DATASETS
  const srs = useSRSState(`lingua.srs.${datasetKey}`, data);
  const [tab, setTab] = useState<"mcq" | "write" | "listen">("mcq");

  // SSR gÃ¼venli baÅŸlangÄ±Ã§: Ã¶nce 0, mount'tan sonra localStorage'dan yÃ¼kle
  const [total, setTotal] = useState<number>(0);
  const [correct, setCorrect] = useState<number>(0);

  // Dataset deÄŸiÅŸtiÄŸinde tarayÄ±cÄ±da deÄŸerleri oku
  useEffect(() => {
    if (typeof window === "undefined") return;
    const t = window.localStorage.getItem(`lingua.total.${datasetKey}`);
    const c = window.localStorage.getItem(`lingua.correct.${datasetKey}`);
    setTotal(t ? Number(t) : 0);
    setCorrect(c ? Number(c) : 0);
  }, [datasetKey]);

  // total/correct deÄŸiÅŸince tarayÄ±cÄ±da yaz
  useEffect(() => {
    if (typeof window === "undefined") return;
    window.localStorage.setItem(`lingua.total.${datasetKey}`, String(total));
  }, [datasetKey, total]);

  useEffect(() => {
    if (typeof window === "undefined") return;
    window.localStorage.setItem(`lingua.correct.${datasetKey}`, String(correct));
  }, [datasetKey, correct]);

  const accuracy = total ? Math.round((100 * correct) / total) : 0;

  function finishQuestion(ok: boolean, itemId: number) {
    setTotal((t) => t + 1);
    setCorrect((c) => c + (ok ? 1 : 0));
    srs.bump(itemId, ok);
    // localStorage'a yazma iÅŸini yukarÄ±daki useEffect'ler yapÄ±yor
  }

  function resetProgress() {
    if (typeof window === "undefined") return;
    window.localStorage.removeItem(`lingua.srs.${datasetKey}`);
    window.localStorage.removeItem(`lingua.total.${datasetKey}`);
    window.localStorage.removeItem(`lingua.correct.${datasetKey}`);
    window.location.reload();
  }

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-sky-100 via-white to-emerald-100 text-foreground p-6">
      <div className="max-w-4xl mx-auto">
        <header className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-2xl font-bold">LinguaWrite</h1>
            <p className="text-sm text-muted-foreground">
              Learn by listening, writing, and recalling actively.
            </p>
          </div>
          <div className="flex items-center gap-2">
            <DatasetPicker value={datasetKey} onChange={setDatasetKey} />
            <Button variant="secondary" onClick={resetProgress}>
              <RotateCcw className="w-4 h-4 mr-2" /> Reset
            </Button>
          </div>
        </header>

        <Card className="mb-6 backdrop-blur-md bg-white/30 shadow-lg border-none">
          <CardContent className="p-4 grid grid-cols-1 md:grid-cols-3 gap-4">
            <Stat label="Items" value={String(data.length)} />
            <Stat label="Total" value={String(total)} />
            <Stat label="Accuracy" value={`${accuracy}%`} />
          </CardContent>
        </Card>

        <Tabs value={tab} onValueChange={(v) => setTab(v as "mcq" | "write" | "listen")}>
          <TabsList className="mb-4 flex gap-2 bg-white/40 backdrop-blur rounded-lg p-1">
            <TabsTrigger value="mcq">Multiple Choice</TabsTrigger>
            <TabsTrigger value="write">Type the Answer</TabsTrigger>
            <TabsTrigger value="listen">Listen &amp; Type</TabsTrigger>
          </TabsList>

          <TabsContent value="mcq">
            <McqMode data={data} srs={srs} onFinish={finishQuestion} />
          </TabsContent>

          <TabsContent value="write">
            <WriteMode data={data} srs={srs} onFinish={finishQuestion} />
          </TabsContent>

          <TabsContent value="listen">
            <ListenMode data={data} srs={srs} onFinish={finishQuestion} datasetKey={datasetKey} />
          </TabsContent>
        </Tabs>

        <footer className="mt-8 text-xs text-muted-foreground text-center">
          <p>Dataset-agnostic design. Add more languages easily.</p>
        </footer>
      </div>
    </div>
  );
}
//// ===== END: C:\Users\seyyid\lingua-write-web\src\features\training\TrainingPage.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\features\training\WriteMode.tsx =====
"use client";

import React, { useEffect, useRef, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Keyboard, Volume2 } from "lucide-react";
import { motion } from "framer-motion";

import type { Item } from "@/lib/types";
import type { SRSApi } from "@/lib/srs";
import { fuzzyEq, hint, speak } from "@/lib/utils";
import { Feedback } from "./components/SubComponents";

type WritingState = { item: Item; done: boolean; ok: boolean | null };

export default function WriteMode({
  data,
  srs,
  onFinish,
}: {
  data: Item[];
  srs: SRSApi;
  onFinish: (ok: boolean, itemId: number) => void;
}) {
  const [writing, setWriting] = useState<WritingState | null>(null);
  const [input, setInput] = useState<string>("");
  const inputRef = useRef<HTMLInputElement | null>(null);

  const generateWriting = () => {
    const item = srs.pickWeighted();
    setWriting({ item, done: false, ok: null });
    setInput("");
    setTimeout(() => inputRef.current?.focus(), 0);
  };

  useEffect(() => {
    generateWriting();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [data.length]);

  const checkWriting = () => {
    if (!writing || writing.done) return;
    const ok = fuzzyEq(input, writing.item.src);
    onFinish(ok, writing.item.id);
    setWriting({ ...writing, done: true, ok });
  };

  const nextWriting = () => generateWriting();

  if (!writing) return null;

  return (
    <Card className="backdrop-blur bg-white/40 border-none shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          Translate to English
          <Badge variant="secondary" className="ml-2">
            {writing.item.dst}
          </Badge>
          <Button
            size="icon"
            variant="ghost"
            className="ml-auto"
            onClick={() => speak(writing.item.dst, "tr-TR")}
            title="Play pronunciation (TR)"
          >
            <Volume2 className="w-4 h-4" />
          </Button>
        </CardTitle>
      </CardHeader>

      <CardContent>
        <motion.div
          animate={
            writing.done && writing.ok === false
              ? { x: [0, -6, 6, -6, 6, 0] } // "shake" animasyonu
              : {}
          }
          transition={{ duration: 0.4 }}
          className="flex items-center gap-2"
        >
          <Input
            ref={inputRef}
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Type here..."
            onKeyDown={(e) => e.key === "Enter" && checkWriting()}
            disabled={writing.done}
          />
          <Button onClick={checkWriting} disabled={writing.done}>
            Check
          </Button>
          <Button variant="secondary" onClick={nextWriting}>
            Next
          </Button>
        </motion.div>

        <div className="mt-3">
          {writing.done ? (
            <Feedback
              ok={!!writing.ok}
              correct={writing.item.src}
              hint={hint(input, writing.item.src)}
            />
          ) : (
            <span className="text-sm text-muted-foreground flex items-center gap-2">
              <Keyboard className="w-4 h-4" /> Type the English word or phrase.
            </span>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
//// ===== END: C:\Users\seyyid\lingua-write-web\src\features\training\WriteMode.tsx =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\lib\datasets\en_tr.ts =====
// src/lib/datasets/en_tr.ts
import { DatasetKey, Item } from "@/lib/types";

export const DATASETS: Record<DatasetKey, Item[]> = {
  en_tr: [
    { id: 1, src: "apple", dst: "elma", pos: "noun" },
    { id: 2, src: "bread", dst: "ekmek", pos: "noun" },
    { id: 3, src: "water", dst: "su", pos: "noun" },
    { id: 4, src: "to eat", dst: "yemek", pos: "verb" },
    { id: 5, src: "to drink", dst: "iÃ§mek", pos: "verb" },
    { id: 6, src: "cat", dst: "kedi", pos: "noun" },
    { id: 7, src: "dog", dst: "kÃ¶pek", pos: "noun" },
    { id: 8, src: "house", dst: "ev", pos: "noun" },
    { id: 9, src: "big", dst: "bÃ¼yÃ¼k", pos: "adj" },
    { id: 10, src: "small", dst: "kÃ¼Ã§Ã¼k", pos: "adj" },
  ],
};
//// ===== END: C:\Users\seyyid\lingua-write-web\src\lib\datasets\en_tr.ts =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\lib\datasets\tr_ru.ts =====
// src/lib/datasets/tr_ru.ts
import { DatasetKey, Item } from "@/lib/types";

export const DATASETS: Record<DatasetKey, Item[]> = {
  tr_ru: [
    { id: 1, src: "elma", dst: "ÑĞ±Ğ»Ğ¾ĞºĞ¾", pos: "noun" },
    { id: 2, src: "ekmek", dst: "Ñ…Ğ»ĞµĞ±", pos: "noun" },
    { id: 3, src: "su", dst: "Ğ²Ğ¾Ğ´Ğ°", pos: "noun" },
    { id: 4, src: "yemek", dst: "ĞµÑÑ‚ÑŒ", pos: "verb" },
    { id: 5, src: "iÃ§mek", dst: "Ğ¿Ğ¸Ñ‚ÑŒ", pos: "verb" },
    { id: 6, src: "kedi", dst: "ĞºĞ¾Ñ‚", pos: "noun" },
    { id: 7, src: "kÃ¶pek", dst: "ÑĞ¾Ğ±Ğ°ĞºĞ°", pos: "noun" },
    { id: 8, src: "ev", dst: "Ğ´Ğ¾Ğ¼", pos: "noun" },
    { id: 9, src: "bÃ¼yÃ¼k", dst: "Ğ±Ğ¾Ğ»ÑŒÑˆĞ¾Ğ¹", pos: "adj" },
    { id: 10, src: "kÃ¼Ã§Ã¼k", dst: "Ğ¼Ğ°Ğ»ĞµĞ½ÑŒĞºĞ¸Ğ¹", pos: "adj" },
  ],
};
//// ===== END: C:\Users\seyyid\lingua-write-web\src\lib\datasets\tr_ru.ts =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\lib\srs.ts =====
// src/lib/srs.ts
"use client";

import { useEffect, useState } from "react";
import type { Item } from "@/lib/types";

export type SRSApi = {
  state: Record<number, { mistakes: number; lastSeen: number }>;
  bump: (id: number, correct: boolean) => void;
  pickWeighted: () => Item;
};

export function useSRSState(key: string, items: Item[]): SRSApi {
  type SRS = Record<number, { mistakes: number; lastSeen: number }>;
  const [state, setState] = useState<SRS>(() => {
    const raw = typeof window !== "undefined" ? localStorage.getItem(key) : null;
    return raw ? (JSON.parse(raw) as SRS) : {};
  });

  useEffect(() => {
    localStorage.setItem(key, JSON.stringify(state));
  }, [key, state]);

  const bump = (id: number, correct: boolean) => {
    setState(prev => {
      const curr = prev[id] || { mistakes: 0, lastSeen: 0 };
      const mistakes = Math.max(0, curr.mistakes + (correct ? -1 : 1));
      return { ...prev, [id]: { mistakes, lastSeen: Date.now() } };
    });
  };

  const pickWeighted = (): Item => {
    const now = Date.now();
    const weights = items.map(it => {
      const s = state[it.id] || { mistakes: 0, lastSeen: 0 };
      const elapsedSec = Math.max(1, (now - s.lastSeen) / 1000);
      const recencyFactor = Math.min(4, Math.log2(elapsedSec + 1));
      const base = 1 + s.mistakes;
      return { it, w: base * recencyFactor };
    });
    const total = weights.reduce((sum, x) => sum + x.w, 0);
    let r = Math.random() * total;
    for (const x of weights) {
      if ((r -= x.w) <= 0) return x.it;
    }
    return items[Math.floor(Math.random() * items.length)];
  };

  return { state, bump, pickWeighted };
}
//// ===== END: C:\Users\seyyid\lingua-write-web\src\lib\srs.ts =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\lib\types.ts =====
// src/lib/types.ts
export type Item = { id: number; src: string; dst: string; pos?: string };
export type DatasetKey = "en_tr" | "tr_ru";

//// ===== END: C:\Users\seyyid\lingua-write-web\src\lib\types.ts =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\lib\utils.ts =====
// src/lib/utils.ts
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

// --- shadcn/ui'nin beklediÄŸi yardÄ±mcÄ±:
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// --- senin util'larÄ±n:
export function levenshtein(a = "", b = ""): number {
  a = a.toLowerCase().trim();
  b = b.toLowerCase().trim();
  const n = a.length, m = b.length;
  const dp: number[][] = Array.from({ length: n + 1 }, () => Array(m + 1).fill(0));
  for (let i = 0; i <= n; i++) dp[i][0] = i;
  for (let j = 0; j <= m; j++) dp[0][j] = j;
  for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= m; j++) {
      const cost = a[i - 1] === b[j - 1] ? 0 : 1;
      dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost);
    }
  }
  return dp[n][m];
}

export const eq = (a?: string, b?: string) =>
  (a ?? "").trim().toLowerCase() === (b ?? "").trim().toLowerCase();

export const fuzzyEq = (a?: string, b?: string) => {
  const A = (a ?? "").trim().toLowerCase();
  const B = (b ?? "").trim().toLowerCase();
  return A === B || levenshtein(A, B) <= 1;
};

export const hint = (user?: string, target?: string) => {
  const u = (user || "").toLowerCase();
  const t = (target || "").toLowerCase();
  if (!u) return "";
  const d = levenshtein(u, t);
  if (d === 1) return "(almost there â€“ 1 letter off)";
  if (d === 2) return "(close â€“ 2 letters off)";
  return "";
};

export function shuffle<T>(arr: T[]): T[] {
  const a = arr.slice();
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

export function speak(text: string, lang = "en-US") {
  try {
    const u = new SpeechSynthesisUtterance(text);
    u.lang = lang;
    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(u);
  } catch {}
}
//// ===== END: C:\Users\seyyid\lingua-write-web\src\lib\utils.ts =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\src\styles\theme.css =====
//// ===== END: C:\Users\seyyid\lingua-write-web\src\styles\theme.css =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\package.json =====
{
  "name": "lingua-write-web",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "eslint"
  },
  "dependencies": {
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.13",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.23.24",
    "lucide-react": "^0.548.0",
    "next": "16.0.1",
    "react": "19.2.0",
    "react-dom": "19.2.0",
    "tailwind-merge": "^3.3.1"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "16.0.1",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.4.0",
    "typescript": "^5"
  }
}
//// ===== END: C:\Users\seyyid\lingua-write-web\package.json =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\tsconfig.json =====
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "react-jsx",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    ".next/dev/types/**/*.ts",
    "**/*.mts"
  ],
  "exclude": ["node_modules"]
}
//// ===== END: C:\Users\seyyid\lingua-write-web\tsconfig.json =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\next.config.ts =====
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
//// ===== END: C:\Users\seyyid\lingua-write-web\next.config.ts =====

//// ===== BEGIN: C:\Users\seyyid\lingua-write-web\components.json =====
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "registries": {}
}
//// ===== END: C:\Users\seyyid\lingua-write-web\components.json =====

